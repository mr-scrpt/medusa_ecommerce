import { MedusaContainer } from "@medusajs/framework";
import { ModuleRegistrationName } from "@medusajs/framework/utils";

/**
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü attribute –∏ attribute_value.
 * –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ —Å—Ä–µ–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */
export default async function handler({
  container,
}: {
  container: MedusaContainer;
}): Promise<void> {
  console.log("üöÄ Starting attribute reset script...");

  const attributeModuleService = container.resolve(
    ModuleRegistrationName.ATTRIBUTE,
  );

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ (AttributeValue)
    const attributeValues = await attributeModuleService.listAttributeValues({
      select: ["id"], // –ù–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    });
    const valueIds = attributeValues.map((v) => v.id);

    if (valueIds.length > 0) {
      console.log(`üî• Deleting ${valueIds.length} attribute values...`);
      await attributeModuleService.deleteAttributeValues(valueIds);
      console.log("‚úÖ Attribute values deleted.");
    } else {
      console.log("‚úÖ No attribute values to delete.");
    }

    // 2. –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∞–º–∏ –∞—Ç—Ä–∏–±—É—Ç—ã (Attribute)
    const attributes = await attributeModuleService.listAttributes({
      select: ["id"],
    });
    const attributeIds = attributes.map((a) => a.id);

    if (attributeIds.length > 0) {
      console.log(`üî• Deleting ${attributeIds.length} attributes...`);
      await attributeModuleService.deleteAttributes(attributeIds);
      console.log("‚úÖ Attributes deleted.");
    } else {
      console.log("‚úÖ No attributes to delete.");
    }

    console.log("‚ú® Reset complete!");
  } catch (error) {
    console.error("‚ùå Error during attribute reset:", error);
  }
}
